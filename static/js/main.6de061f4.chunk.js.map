{"version":3,"sources":["Components/EventSlider.js","Reference/MDLData.txt","Reference/SPTData.txt","Reference/HRPData.txt","Reference/SDCData.txt","Components/TimeSlider.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","width","color","input","EventSlider","props","classes","React","useState","min","value","setValue","score","setScore","useEffect","grabScoreFromFile","handleSliderChange","event","newValue","a","handleInputChange","target","Number","fetch","fileName","fileContent","text","console","log","lines","split","findScore","max","i","length","className","Typography","id","gutterBottom","eventName","Grid","container","spacing","alignItems","item","xs","ACFTSlider","onChange","aria-labelledby","defaultValue","valueLabelDisplay","step","marks","output","push","generateMarks","Input","margin","inputProps","type","withStyles","thumb","height","backgroundColor","boxShadow","active","valueLabel","left","track","borderRadius","rail","mark","Slider","TimeSlider","handleTimeSliderChange","minutes","Math","floor","seconds","toLocaleString","minimumIntegerDigits","useGrouping","handleMinuteChange","newMinutes","parseInt","newTotal","handleSecondChange","newSeconds","toString","App","MDLFile","SPTFile","HRPFile","SDCFile","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6de061f4.chunk.js","sourcesContent":["import React,  { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport moment from 'moment'\n\n// style for the slider\nconst useStyles = makeStyles({\n    root: {\n        width: 500,\n        color: \"white\",\n\n    },\n    input: {\n        width: 42,\n        color: 'white',\n    },\n});\n\nexport default function EventSlider(props)\n{\n    const classes = useStyles();\n    // value starts at the min\n    const [value, setValue] = React.useState(props.min);\n    const [score, setScore] = React.useState(0);\n\n    // same as component did mount for obj compo's \n    useEffect(() => {\n        grabScoreFromFile();\n    });\n\n    // for the slider\n    const handleSliderChange = async (event, newValue) =>\n    {\n         setValue(newValue);\n    };\n\n    // for the text field\n    const handleInputChange = async (event) =>\n    {\n        setValue(event.target.value === '' ? '' : Number(event.target.value))\n    };\n\n    // handleBlur called when component goes out of focus\n    // const handleBlur = async() =>\n    // {\n    //     if (value < props.min)\n    //     {\n    //         setValue(props.min);\n    //     } else if (value > props.max)\n    //     {\n    //         setValue(props.max);\n    //     }\n    // };\n\n    const grabScoreFromFile = async () =>\n    {\n        // might fail, but if doesnt replace w fileName\n        const fileContent = await fetch(props.fileName);\n        const text = await fileContent.text();\n        console.log('value is ', value)\n        var lines = text.split(\"\\n\");\n        console.log(lines);\n\n        var score = findScore(lines);\n        console.log('score is ', score)\n        setScore(score);\n        //return score;\n    }\n\n    function findScore(lines)\n    {\n        if (value <= props.min)\n        {\n            return 0;\n        } else if (value >= props.max)\n        {\n            return 100;\n        }\n\n        for (let i = 0; i < lines.length-1; i++)\n        {\n            if (value >= Number(lines[i].split(' ')[0]) && value < Number(lines[i+1].split(' ')[0]))\n            {\n                return lines[i].split(' ')[1];\n            }\n        }\n    }\n\n    function generateMarks()\n    {\n        let output = []\n        for (let i = props.min ; i < props.max ; i += props.step)\n        {\n            output.push({ value: i })\n        }\n        return output;\n    }\n\n    return (\n        <div className={classes.root}>\n            <Typography id=\"input-slider\" gutterBottom>\n                {props.eventName}\n            </Typography>\n            <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs>\n                    <ACFTSlider\n                        value={typeof value === 'number' ? value : 0}\n                        onChange={handleSliderChange}\n                        aria-labelledby=\"input-slider\"\n                        defaultValue={props.min}\n                        valueLabelDisplay=\"auto\"\n                        step={props.step}\n                        marks={generateMarks()}\n                        min={props.min}\n                        max={props.max} />\n                </Grid>\n                <Grid item>\n                    <Input\n                        className={classes.input}\n                        value={value}\n                        margin=\"dense\"\n                        onChange={handleInputChange}\n\n                        inputProps={{\n                            step: props.step,\n                            min: props.min,\n                            max: props.max,\n                            type: 'number',\n                            'aria-labelledby': 'input-slider',\n                        }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Typography> {score} </Typography>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nEventSlider.propTypes = {\n    eventName: PropTypes.string,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    step: PropTypes.number,\n    fileName: PropTypes.string,\n}\n\nvar ACFTSlider = withStyles({\n    root: {\n        color: 'black',\n    },\n    thumb: {\n        height: 16,\n        width: 16,\n        backgroundColor: '#936e11ec',\n        '&:focus, &:hover, &$active': {\n            boxShadow: 'inherit',\n        },\n    },\n    active: {},\n    valueLabel: {\n        left: 'calc(-50%)',\n    },\n    track: {\n        height: 8,\n        borderRadius: 4,\n    },\n    rail: {\n        height: 8,\n        borderRadius: 4,\n    },\n    mark: {\n        backgroundColor: '#936e11ec',\n        height: 2,\n        width: 1,\n    },\n})(Slider);\n\n\n\n","export default __webpack_public_path__ + \"static/media/MDLData.d0297944.txt\";","export default __webpack_public_path__ + \"static/media/SPTData.f716e833.txt\";","export default __webpack_public_path__ + \"static/media/HRPData.1cc15ff8.txt\";","export default __webpack_public_path__ + \"static/media/SDCData.ef8cff09.txt\";","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\nimport TextField from '@material-ui/core/TextField'\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport NumberFormat from 'react-number-format';\n\n// style for the slider\nconst useStyles = makeStyles({\n    root: {\n        width: 500,\n        color: \"white\",\n\n    },\n    input: {\n        width: 42,\n        color: 'white',\n    },\n});\n\nexport default function TimeSlider(props)\n{\n    const classes = useStyles();\n    // value starts at the min\n    const [value, setValue] = React.useState(props.min);\n    const [score, setScore] = React.useState(0);\n\n    // same as component did mount for obj compo's \n    useEffect(() =>\n    {\n        grabScoreFromFile();\n    });\n\n    // for the slider\n    const handleTimeSliderChange = async (event, newValue) =>\n    {\n        setValue(newValue);\n    };\n\n    var minutes = Math.floor(value / 60);\n    var seconds = (value - minutes * 60).toLocaleString('en-US', {\n        minimumIntegerDigits: 2,\n        useGrouping: false\n      });\n\n    // for the text field\n    const handleMinuteChange = async (event) =>\n    {\n        let newMinutes = 0;\n        newMinutes = parseInt(event.target.value)\n        console.log(newMinutes, seconds)\n\n        let newTotal = newMinutes * 60 + seconds\n\n        if(newTotal >= 0){\n            setValue(newTotal)\n        } else {setValue(seconds)}\n\n    };\n\n    const handleSecondChange = async (event) =>\n    {\n        let newSeconds = 0;\n        newSeconds = parseInt(event.target.value)\n\n        seconds = parseInt(event.target.value)\n        console.log(minutes, newSeconds)\n\n        let newTotal = minutes * 60 + newSeconds;\n\n        if (newTotal >= 0)\n        {\n            setValue(newTotal)\n        } else { setValue(minutes * 60) }\n    };\n    // handleBlur called when component goes out of focus\n    // const handleBlur = async() =>\n    // {\n    //     if (value < props.min)\n    //     {\n    //         setValue(props.min);\n    //     } else if (value > props.max)\n    //     {\n    //         setValue(props.max);\n    //     }\n    // };\n\n    const grabScoreFromFile = async () =>\n    {\n        // might fail, but if doesnt replace w fileName\n        const fileContent = await fetch(props.fileName);\n        const text = await fileContent.text();\n        console.log('value is ', value)\n        var lines = text.split(\"\\n\");\n\n        var score = findScore(lines);\n        console.log('score is ', score)\n        setScore(score);\n        //return score;\n    }\n\n    function findScore(lines)\n    {\n        if (value <= props.min)\n        {\n            return 100;\n        } else if (value >= props.max)\n        {\n            return 0;\n        }\n\n        // needs to go from (lowerNum, higherNum] and then return the score of the higher\n        for (let i = 0; i < lines.length - 1; i++)\n        {\n            if (value > Number(lines[i].split(' ')[0]) \n                && value <= Number(lines[i + 1].split(' ')[0]))\n            {\n                return lines[i+1].split(' ')[1];\n            }\n        }\n    }\n\n    function generateMarks()\n    {\n        let output = []\n        for (let i = props.min; i < props.max; i += props.step)\n        {\n            output.push({ value: i })\n        }\n        return output;\n    }\n\n    return (\n        <div className={classes.root}>\n            <Typography id=\"input-slider\" gutterBottom>\n                {props.eventName}\n            </Typography>\n            <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs>\n                    <ACFTSlider\n                        value={value}\n                        onChange={handleTimeSliderChange}\n                        aria-labelledby=\"input-slider\"\n                        defaultValue={props.min}\n                        valueLabelDisplay=\"auto\"\n                        step={props.step}\n                        marks={generateMarks()}\n                        min={props.min}\n                        max={props.max} />\n                </Grid>\n                <Grid item>\n                    <Input\n                        className={classes.input}\n                        value={minutes.toString()}\n                        margin=\"dense\"\n                        onChange={handleMinuteChange}\n\n                        inputProps={{\n                            step: props.step,\n                            min: 0,\n                            max: 4,\n                            type: 'number',\n                            'aria-labelledby': 'input-slider',\n                        }}\n                    /> \n                    <Input\n                        className={classes.input}\n                        value={seconds.toString()}\n                        margin=\"dense\"\n                        onChange={handleSecondChange}\n\n                        inputProps={{\n                            step: props.step,\n                            min: 0,\n                            max: 59,\n                            type: 'number',\n                            'aria-labelledby': 'input-slider',\n                        }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Typography> {score} </Typography>\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nTimeSlider.propTypes = {\n    eventName: PropTypes.string,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    step: PropTypes.number,\n    fileName: PropTypes.string,\n}\n\nvar ACFTSlider = withStyles({\n    root: {\n        color: 'black',\n    },\n    thumb: {\n        height: 16,\n        width: 16,\n        backgroundColor: '#936e11ec',\n        '&:focus, &:hover, &$active': {\n            boxShadow: 'inherit',\n        },\n    },\n    active: {},\n    valueLabel: {\n        left: 'calc(-50%)',\n    },\n    track: {\n        height: 8,\n        borderRadius: 4,\n    },\n    rail: {\n        height: 8,\n        borderRadius: 4,\n    },\n    mark: {\n        backgroundColor: '#936e11ec',\n        height: 2,\n        width: 1,\n    },\n})(Slider);\n\n","import './App.css';\nimport EventSlider from './Components/EventSlider';\nimport MDLFile from './Reference/MDLData.txt';\nimport SPTFile from './Reference/SPTData.txt';\nimport HRPFile from './Reference/HRPData.txt';\nimport SDCFile from './Reference/SDCData.txt'\nimport TimeSlider from './Components/TimeSlider';\n\n\nfunction App()\n{\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <EventSlider\n          eventName=\"Deadlift\"\n          min={130}\n          max={340}\n          step={10}\n          fileName={MDLFile}\n        />\n        <EventSlider\n          eventName=\"Power Throw\"\n          min={4.3}\n          max={12.5}\n          step={0.1}\n          fileName={SPTFile}\n        />\n        <EventSlider\n          eventName=\"Hand-Release Pushups\"\n          min={8}\n          max={60}\n          step={1}\n          fileName={HRPFile}\n        />\n        <TimeSlider\n          eventName=\"Sprint-Drag-Carry\"\n          min={93}\n          max={215}\n          step={1}\n          fileName={SDCFile}\n        />\n      </header>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}