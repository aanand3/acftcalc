{"version":3,"sources":["logo.svg","Reference/MDLData.csv","Components/MDLInput.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","width","color","input","palette","type","MDLInput","classes","React","useState","value","setValue","score","setScore","grabScoreFromFile","a","fetch","scoreFile","fileContent","text","match","RegExp","className","Typography","id","gutterBottom","Grid","container","spacing","alignItems","item","xs","ACFTSlider","onChange","event","newValue","aria-labelledby","defaultValue","valueLabelDisplay","step","marks","generateMarks","min","max","Input","margin","target","Number","onBlur","inputProps","Button","onClick","withStyles","thumb","height","backgroundColor","boxShadow","active","valueLabel","left","track","borderRadius","rail","mark","Slider","output","i","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAAe,I,8ECAA,MAA0B,oC,sBCWnCA,EAAYC,YAAW,CACzBC,KAAM,CACFC,MAAO,IACPC,MAAO,SAGXC,MAAO,CACHF,MAAO,GACPC,MAAO,SAGXE,QAAS,CACLC,KAAM,UAMC,SAASC,IAEpB,IAAMC,EAAUT,IAChB,EAA0BU,IAAMC,SAAS,KAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BH,IAAMC,SAAS,GAAzC,mBAAOG,EAAP,KAAcC,EAAd,KAyBMC,EAAiB,uCAAG,gCAAAC,EAAA,sEAEIC,MAAMC,GAFV,cAEhBC,EAFgB,gBAGHA,EAAYC,OAHT,OAGhBA,EAHgB,OAKlBP,EAAQO,EAAKC,MAAM,IAAIC,OAAOX,EAAQ,cAAc,GACxDG,EAASD,GANa,2CAAH,qDAUvB,OACI,sBAAKU,UAAWf,EAAQP,KAAxB,UACI,cAACuB,EAAA,EAAD,CAAYC,GAAG,eAAeC,cAAY,EAA1C,4BAGA,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,WAAW,SAAvC,UACI,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,SACI,cAACC,EAAD,CACItB,MAAwB,kBAAVA,EAAqBA,EAAQ,EAC3CuB,SA1CO,SAACC,EAAOC,GAE/BxB,EAASwB,GACTrB,KAwCgBsB,kBAAgB,eAChBC,aAAc,IACdC,kBAAkB,OAClBC,KAAM,GACNC,MAAOC,IACPC,IAAK,IACLC,IAAK,QAEb,cAACjB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACc,EAAA,EAAD,CACItB,UAAWf,EAAQJ,MACnBO,MAAOA,EACPmC,OAAO,QACPZ,SAlDM,SAACC,GAEvBvB,EAAgC,KAAvBuB,EAAMY,OAAOpC,MAAe,GAAKqC,OAAOb,EAAMY,OAAOpC,QAC9DI,KAgDgBkC,OA7CD,WAEXtC,EAAQ,IAERC,EAAS,KACFD,EAAQ,KAEfC,EAAS,MAuCGsC,WAAY,CACRV,KAAM,GACNG,IAAK,IACLC,IAAK,IACLtC,KAAM,SACN,kBAAmB,oBAI/B,cAACqB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACI,cAACP,EAAA,EAAD,UAAaX,MAEjB,cAACsC,EAAA,EAAD,CAAQC,QAAS,kBAAMrC,EAAkBJ,IAAzC,qCAOhB,IAAIsB,EAAaoB,YAAW,CACxBpD,KAAM,CACFE,MAAO,SAEXmD,MAAO,CACHC,OAAQ,GACRrD,MAAO,GACPsD,gBAAiB,YACjB,6BAA8B,CAC1BC,UAAW,YAGnBC,OAAQ,GACRC,WAAY,CACRC,KAAM,cAEVC,MAAO,CACHN,OAAQ,EACRO,aAAc,GAElBC,KAAM,CACFR,OAAQ,EACRO,aAAc,GAElBE,KAAM,CACFR,gBAAiB,YACjBD,OAAQ,EACRrD,MAAO,IA3BEmD,CA6BdY,KAEH,SAASvB,IAGL,IADA,IAAIwB,EAAS,GACJC,EAAI,IAAKA,EAAI,IAAKA,GAAK,GAE5BD,EAAOE,KAAK,CAAEzD,MAAOwD,IAEzB,OAAOD,ECvIIG,MAXf,WACE,OACE,qBAAK9C,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAChB,EAAD,SCIO+D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a8da9d70.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/MDLData.d0297944.csv\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\nimport scoreFile from '../Reference/MDLData.csv';\nimport { Button } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles({\n    root: {\n        width: 500,\n        color: \"white\",\n        \n    },\n    input: {\n        width: 42,\n        color: 'white',\n    },\n\n    palette: {\n        type: 'dark',\n    },\n});\n\n\n\nexport default function MDLInput()\n{\n    const classes = useStyles();\n    const [value, setValue] = React.useState(130);\n    const [score, setScore] = React.useState(0);\n\n    const handleSliderChange = (event, newValue) =>\n    {\n        setValue(newValue);\n        grabScoreFromFile();\n    };\n\n    const handleInputChange = (event) =>\n    {\n        setValue(event.target.value === '' ? '' : Number(event.target.value));\n        grabScoreFromFile();\n    };\n\n    const handleBlur = () =>\n    {\n        if (value < 130)\n        {\n            setValue(130);\n        } else if (value > 340)\n        {\n            setValue(340);\n        }\n    };\n\n    const grabScoreFromFile = async () =>\n    {\n        const fileContent = await fetch(scoreFile);\n        const text = await fileContent.text();\n\n        var score = text.match(new RegExp(value + '\\\\s(\\\\w+)'))[1];\n        setScore(score);\n        //return score;\n    }\n\n    return (\n        <div className={classes.root}>\n            <Typography id=\"input-slider\" gutterBottom>\n                Deadlift Score\n            </Typography>\n            <Grid container spacing={2} alignItems=\"center\">\n                <Grid item xs>\n                    <ACFTSlider\n                        value={typeof value === 'number' ? value : 0}\n                        onChange={handleSliderChange}\n                        aria-labelledby=\"input-slider\"\n                        defaultValue={130}\n                        valueLabelDisplay=\"auto\"\n                        step={10}\n                        marks={generateMarks()}\n                        min={130}\n                        max={340} />\n                </Grid>\n                <Grid item>\n                    <Input\n                        className={classes.input}\n                        value={value}\n                        margin=\"dense\"\n                        onChange={handleInputChange}\n                        onBlur={handleBlur}\n                        inputProps={{\n                            step: 10,\n                            min: 130,\n                            max: 340,\n                            type: 'number',\n                            'aria-labelledby': 'input-slider',\n                        }}\n                    />\n                </Grid>\n                <Grid item>\n                    <Typography>{score}</Typography>\n                </Grid>\n                <Button onClick={() => grabScoreFromFile(value)}>Show file content</Button>\n            </Grid>\n        </div>\n    );\n}\n\n\nvar ACFTSlider = withStyles({\n    root: {\n        color: 'black',\n    },\n    thumb: {\n        height: 16,\n        width: 16,\n        backgroundColor: '#936e11ec',\n        '&:focus, &:hover, &$active': {\n            boxShadow: 'inherit',\n        },\n    },\n    active: {},\n    valueLabel: {\n        left: 'calc(-50%)',\n    },\n    track: {\n        height: 8,\n        borderRadius: 4,\n    },\n    rail: {\n        height: 8,\n        borderRadius: 4,\n    },\n    mark: {\n        backgroundColor: '#936e11ec',\n        height: 2,\n        width: 1,\n    },\n})(Slider);\n\nfunction generateMarks()\n{\n    let output = []\n    for (let i = 140; i < 340; i += 10)\n    {\n        output.push({ value: i })\n    }\n    return output;\n}\n\nfunction findScore(raw) \n{\n\n}","import logo from './logo.svg';\nimport './App.css';\nimport MDLInput from './Components/MDLInput'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MDLInput />\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}